/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-appstudio/jvm-build-service/pkg/apis/jvmbuildservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JvmBuildStatusLister helps list JvmBuildStatuses.
// All objects returned here must be treated as read-only.
type JvmBuildStatusLister interface {
	// List lists all JvmBuildStatuses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JvmBuildStatus, err error)
	// JvmBuildStatuses returns an object that can list and get JvmBuildStatuses.
	JvmBuildStatuses(namespace string) JvmBuildStatusNamespaceLister
	JvmBuildStatusListerExpansion
}

// jvmBuildStatusLister implements the JvmBuildStatusLister interface.
type jvmBuildStatusLister struct {
	indexer cache.Indexer
}

// NewJvmBuildStatusLister returns a new JvmBuildStatusLister.
func NewJvmBuildStatusLister(indexer cache.Indexer) JvmBuildStatusLister {
	return &jvmBuildStatusLister{indexer: indexer}
}

// List lists all JvmBuildStatuses in the indexer.
func (s *jvmBuildStatusLister) List(selector labels.Selector) (ret []*v1alpha1.JvmBuildStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JvmBuildStatus))
	})
	return ret, err
}

// JvmBuildStatuses returns an object that can list and get JvmBuildStatuses.
func (s *jvmBuildStatusLister) JvmBuildStatuses(namespace string) JvmBuildStatusNamespaceLister {
	return jvmBuildStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JvmBuildStatusNamespaceLister helps list and get JvmBuildStatuses.
// All objects returned here must be treated as read-only.
type JvmBuildStatusNamespaceLister interface {
	// List lists all JvmBuildStatuses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JvmBuildStatus, err error)
	// Get retrieves the JvmBuildStatus from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JvmBuildStatus, error)
	JvmBuildStatusNamespaceListerExpansion
}

// jvmBuildStatusNamespaceLister implements the JvmBuildStatusNamespaceLister
// interface.
type jvmBuildStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JvmBuildStatuses in the indexer for a given namespace.
func (s jvmBuildStatusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JvmBuildStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JvmBuildStatus))
	})
	return ret, err
}

// Get retrieves the JvmBuildStatus from the indexer for a given namespace and name.
func (s jvmBuildStatusNamespaceLister) Get(name string) (*v1alpha1.JvmBuildStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jvmbuildstatus"), name)
	}
	return obj.(*v1alpha1.JvmBuildStatus), nil
}
