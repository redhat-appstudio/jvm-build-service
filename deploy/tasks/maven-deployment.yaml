---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: maven-deployment
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: docker
spec:
  description: |-
    Takes a OCI archive and deploys the result
  params:
    - name: IMAGE_URL
      description: Reference to the OCI archive
      type: string
    - name: IMAGE_DIGEST
      description: Digest to use
      type: string
    - name: MVN_REPO
      description: Maven repository to deploy to
      type: string
    - name: MVN_USERNAME
      description: Maven repository username
      type: string
      default: ""
    - name: MVN_PASSWORD
      description: Name of the secret holding the Maven repository password
      type: string
    - name: MVN_SERVER_ID
      description: Server identification in Maven settings.
      type: string
      default: "indy-mvn"
    - name: ACCESS_TOKEN
      description: Access token for OAuth.
      type: string
      default: ""
    - name: JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE
      description: Name of the processor image. Useful to override for development.
      type: string
      default: "quay.io/redhat-user-workloads/konflux-jbs-pnc-tenant/jvm-build-service/build-request-processor:latest"
  volumes:
    - name: workdir
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - mountPath: /var/workdir
        name: workdir
  steps:
    - name: restore-trusted-artifact
      image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:81c4864dae6bb11595f657be887e205262e70086a05ed16ada827fd6391926ac
      script: |
        echo "Restoring artifacts to workspace"
        URL=$IMAGE_URL
        DIGEST=$IMAGE_DIGEST
        AARCHIVE=$(oras manifest fetch $ORAS_OPTIONS $URL@$DIGEST | jq --raw-output '.layers[0].digest')
        echo "URL $URL DIGEST $DIGEST AARCHIVE $AARCHIVE"
        use-archive oci:$URL@$AARCHIVE=/var/workdir/
      env:
        - name: IMAGE_DIGEST
          value: $(params.IMAGE_DIGEST)
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
    - name: deploy
      image: $(params.JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE)
      securityContext:
        runAsUser: 0
      computeResources:
        limits:
          cpu: 300m
          memory: 512Mi
        requests:
          cpu: 10m
          memory: 512Mi
      env:
        - name: MAVEN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.MVN_PASSWORD)
              key: mavenpassword
        - name: ACCESS_TOKEN
          value: $(params.ACCESS_TOKEN)
      args:
        - deploy
        - --directory=/var/workdir/deployment
        - --mvn-repo=$(params.MVN_REPO)
        - --mvn-username=$(params.MVN_USERNAME)
        - --server-id=$(params.MVN_SERVER_ID)
