apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: run-maven-component-build
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a Maven build of a component that will be deployed to the sidecar.
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
    - name: maven-settings
      description: >-
        The workspace consisting of the custom maven settings
        provided by the user.
  results:
    - name: contaminants
      description: Any community GAVs that have ended up in the final output.
  params:
    - name: URL
      type: string
    - name: TAG
      type: string
    - name: IMAGE
      type: string
      description: Build image
      default: quay.io/quarkus/centos-quarkus-maven@sha256:9ad23db54acb1775a7d976680325819d2ef177c11726622382f1a540a653a8c8 #tag: 21.3.2-java11
    - name: GOALS
      description: maven goals to run
      type: array
      default:
        - -DskipTests
        - clean
        - install
        - -Denforcer.skip
    - name: MAVEN_MIRROR_URL
      description: The Maven repository mirror url
      type: string
      default: http://localhost:2000/maven2
    - name: SERVER_USER
      description: The username for the server
      type: string
      default: ""
    - name: SERVER_PASSWORD
      description: The password for the server
      type: string
      default: ""
    - name: PROXY_USER
      description: The username for the proxy server
      type: string
      default: ""
    - name: PROXY_PASSWORD
      description: The password for the proxy server
      type: string
      default: ""
    - name: PROXY_PORT
      description: Port number for the proxy server
      type: string
      default: ""
    - name: PROXY_HOST
      description: Proxy server Host
      type: string
      default: ""
    - name: PROXY_NON_PROXY_HOSTS
      description: Non proxy server host
      type: string
      default: ""
    - name: PROXY_PROTOCOL
      description: Protocol for the proxy ie http or https
      type: string
      default: "http"
    - name: CONTEXT_DIR
      type: string
      description: >-
        The context directory within the repository for sources on
        which we want to execute maven goals.
      default: "."
  steps:
    - name: git-clone
      image: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.21.0"
      resources:
        requests:
          memory: "128Mi"
          cpu: "10m"
        limits:
          memory: "512Mi"
          cpu: "300m"
      args:
        - -path=$(workspaces.source.path)
        - -url=$(params.URL)
        - -revision=$(params.TAG)
    - name: settings
      image: "registry.access.redhat.com/ubi8/ubi:8.5"
      resources:
        requests:
          memory: "128Mi"
          cpu: "10m"
        limits:
          memory: "512Mi"
          cpu: "300m"
      script: |
        #!/usr/bin/env bash

        # fix-permissions-for-builder
        chown 1001:1001 -R $(workspaces.source.path)

        # set maven
        [[ -f $(workspaces.maven-settings.path)/settings.xml ]] && \
        echo 'using existing $(workspaces.maven-settings.path)/settings.xml' && exit 0

        cat > $(workspaces.maven-settings.path)/settings.xml <<EOF
        <settings>
          <servers>
            <!-- The servers added here are generated from environment variables. Don't change. -->
            <!-- ### SERVER's USER INFO from ENV ### -->
          </servers>
          <mirrors>
            <!-- The mirrors added here are generated from environment variables. Don't change. -->
            <!-- ### mirrors from ENV ### -->
          </mirrors>
          <proxies>
            <!-- The proxies added here are generated from environment variables. Don't change. -->
            <!-- ### HTTP proxy from ENV ### -->
          </proxies>
        </settings>
        EOF

        xml=""
        if [ -n "$(params.PROXY_HOST)" -a -n "$(params.PROXY_PORT)" ]; then
          xml="<proxy>\
            <id>genproxy</id>\
            <active>true</active>\
            <protocol>$(params.PROXY_PROTOCOL)</protocol>\
            <host>$(params.PROXY_HOST)</host>\
            <port>$(params.PROXY_PORT)</port>"
          if [ -n "$(params.PROXY_USER)" -a -n "$(params.PROXY_PASSWORD)" ]; then
            xml="$xml\
                <username>$(params.PROXY_USER)</username>\
                <password>$(params.PROXY_PASSWORD)</password>"
          fi
          if [ -n "$(params.PROXY_NON_PROXY_HOSTS)" ]; then
            xml="$xml\
                <nonProxyHosts>$(params.PROXY_NON_PROXY_HOSTS)</nonProxyHosts>"
          fi
          xml="$xml\
              </proxy>"
          sed -i "s|<!-- ### HTTP proxy from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi

        if [ -n "$(params.SERVER_USER)" -a -n "$(params.SERVER_PASSWORD)" ]; then
          xml="<server>\
            <id>serverid</id>"
          xml="$xml\
                <username>$(params.SERVER_USER)</username>\
                <password>$(params.SERVER_PASSWORD)</password>"
          xml="$xml\
              </server>"
          sed -i "s|<!-- ### SERVER's USER INFO from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi

        if [ -n "$(params.MAVEN_MIRROR_URL)" ]; then
          xml="    <mirror>\
            <id>mirror.default</id>\
            <url>$(params.MAVEN_MIRROR_URL)</url>\
            <mirrorOf>*</mirrorOf>\
          </mirror>"
          sed -i "s|<!-- ### mirrors from ENV ### -->|$xml|" $(workspaces.maven-settings.path)/settings.xml
        fi

    - name: mvn-goals
      image: $(params.IMAGE)
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      command: ["/usr/bin/mvn"]
      args:
        - "-s"
        - "$(workspaces.maven-settings.path)/settings.xml"
        - "$(params.GOALS)"
        - -DskipTests
        - "-DaltDeploymentRepository=local::file:$(workspaces.source.path)/hacbs-jvm-deployment-repo"
        - "org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M2:deploy"
    - name: deploy-and-check-for-contaminates
      image: "registry.access.redhat.com/ubi8/ubi:8.5"
      script: |
        tar -czf $(workspaces.source.path)/hacbs-jvm-deployment-repo.tar.gz -C $(workspaces.source.path)/hacbs-jvm-deployment-repo .
        curl --data-binary @$(workspaces.source.path)/hacbs-jvm-deployment-repo.tar.gz http://localhost:2000/deploy

        cat $(workspaces.maven-settings.path)/sidecar.log

        curl --fail http://localhost:2000/deploy/result -o $(results.contaminants.path)
      resources:
        requests:
          memory: "128Mi"
          cpu: "10m"
        limits:
          memory: "512Mi"
          cpu: "300m"
  sidecars:
    - image: hacbs-jvm-sidecar
      imagePullPolicy: Always
      env:
        - name: QUARKUS_REST_CLIENT_CACHE_SERVICE_URL
          value: "http://hacbs-jvm-cache"
        - name: QUARKUS_LOG_FILE_ENABLE
          value: "true"
        - name: QUARKUS_LOG_FILE_PATH
          value: "$(workspaces.maven-settings.path)/sidecar.log"
      name: proxy
      volumeMounts:
        - name: $(workspaces.maven-settings.volume)
          mountPath: $(workspaces.maven-settings.path)
      livenessProbe:
        httpGet:
          path: /q/health/live
          port: 2000
        initialDelaySeconds: 1
        periodSeconds: 3
      readinessProbe:
        httpGet:
          path: /q/health/ready
          port: 2000
        initialDelaySeconds: 1
        periodSeconds: 3
      resources:
        requests:
          memory: "128Mi"
          cpu: "250m"
        limits:
          memory: "512Mi"
          cpu: "500m"
