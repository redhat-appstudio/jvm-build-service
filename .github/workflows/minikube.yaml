name: Minikube Tests
on:
  pull_request:
    branches: [ main ]
jobs:
  wait-for-images:
    runs-on: ubuntu-22.04
    steps:
      - name: Wait for Images
        run: |
          while true
          do
            if ! docker pull quay.io/redhat-user-workloads/konflux-jbs-pnc-tenant/jvm-build-service/build-request-processor:on-pr-${{ github.event.pull_request.head.sha }} ; then
              echo "Failed to pull image 1"
              sleep 10
              continue
            fi
            if ! docker pull quay.io/redhat-user-workloads/konflux-jbs-pnc-tenant/jvm-build-service/cache:on-pr-${{ github.event.pull_request.head.sha }} ; then
              echo "Failed to pull image 2"
              sleep 10
              continue
            fi
            if ! docker pull quay.io/redhat-user-workloads/konflux-jbs-pnc-tenant/jvm-build-service/controller:on-pr-${{ github.event.pull_request.head.sha }} ; then
              echo "Failed to pull image 3"
              sleep 10
              continue
            fi
            exit 0
          done
  run-ab-based-tests:
    strategy:
      fail-fast: false
      matrix:
        abtestsets:
          - "test-repos"
          - "build-systems"
          - "commons"
    needs: [wait-for-images]
    runs-on: ubuntu-22.04
    name: Minikube Artifact Build Matrix
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: true
          swap-storage: false
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup Registry
        run: |
          export DEV_IP=172.16.1.1
          sudo ifconfig lo:0 $DEV_IP
          docker run -d -p 5000:5000 --restart=always registry:2
          sudo echo '{ "insecure-registries": ["172.16.1.1:5000"] }' | sudo tee /etc/docker/daemon.json
      - name: Start minikube
        uses: medyagh/setup-minikube@d8c0eb871f6f455542491d86a574477bd3894533 # v0.0.18
        with:
          cpus: max
          memory: max
          insecure-registry: '172.16.1.1:5000'
      - name: Run Tests
        run: |
          export SHELL=/bin/bash
          export DEV_IP=172.16.1.1
          export JBS_WORKER_NAMESPACE=jvm-build-service-test-namespace-$(shuf -er -n5 {a..z} {0..9} | tr -d '\n')
          export MAVEN_USERNAME=admin
          export MAVEN_PASSWORD=secret
          export MAVEN_REPOSITORY="http://jvm-build-maven-repo.${JBS_WORKER_NAMESPACE}.svc.cluster.local/releases"

          export JBS_QUAY_ORG=redhat-user-workloads
          export JBS_QUAY_IMAGE_TAG=on-pr-${{ github.event.pull_request.head.sha }}
          export JBS_QUAY_IMAGE_CONTROLLER=konflux-jbs-pnc-tenant/jvm-build-service/controller
          export JVM_BUILD_SERVICE_IMAGE=quay.io/$JBS_QUAY_ORG/$JBS_QUAY_IMAGE_CONTROLLER:$JBS_QUAY_IMAGE_TAG
          export JVM_BUILD_SERVICE_CACHE_IMAGE=quay.io/$JBS_QUAY_ORG/konflux-jbs-pnc-tenant/jvm-build-service/cache:$JBS_QUAY_IMAGE_TAG
          export JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE=quay.io/$JBS_QUAY_ORG/konflux-jbs-pnc-tenant/jvm-build-service/build-request-processor:$JBS_QUAY_IMAGE_TAG

          echo "Using worker namespace $JBS_WORKER_NAMESPACE DEV_IP $DEV_IP JVM_BUILD_SERVICE_IMAGE $JVM_BUILD_SERVICE_IMAGE"

          eval $(minikube -p minikube docker-env)

          export ABTESTSET=${{ matrix.abtestsets }}
          echo "Using ABTESTSET $ABTESTSET"

          ./deploy/minikube-ci.sh
          make minikube-test
      - name: Archive Report
        uses: actions/upload-artifact@604373da6381bf24206979c74d06a550515601b9 # v4
        if: always()
        with:
          name: matrix-report-${{ matrix.abtestsets }}
          path: /tmp/jvm-build-service-report
  run-db-based-tests:
    strategy:
      fail-fast: false
      matrix:
        dbtestsets:
          - "jakartaee"
    needs: [wait-for-images]
    runs-on: ubuntu-22.04
    name: Minikube Dependency Build Matrix
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          docker-images: false
          large-packages: true
          swap-storage: false
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup Registry
        run: |
          export DEV_IP=172.16.1.1
          sudo ifconfig lo:0 $DEV_IP
          docker run -d -p 5000:5000 --restart=always registry:2
          sudo echo '{ "insecure-registries": ["172.16.1.1:5000"] }' | sudo tee /etc/docker/daemon.json
      - name: Start minikube
        uses: medyagh/setup-minikube@d8c0eb871f6f455542491d86a574477bd3894533 # v0.0.18
        with:
          cpus: max
          memory: max
          insecure-registry: '172.16.1.1:5000'
      - name: Run Tests
        run: |
          export SHELL=/bin/bash
          export DEV_IP=172.16.1.1
          export JBS_WORKER_NAMESPACE=jvm-build-service-test-namespace-$(shuf -er -n5 {a..z} {0..9} | tr -d '\n')
          export MAVEN_USERNAME=admin
          export MAVEN_PASSWORD=secret
          export MAVEN_REPOSITORY="http://jvm-build-maven-repo.${JBS_WORKER_NAMESPACE}.svc.cluster.local/releases"

          export JBS_QUAY_ORG=redhat-user-workloads
          export JBS_QUAY_IMAGE_TAG=on-pr-${{ github.event.pull_request.head.sha }}
          export JBS_QUAY_IMAGE_CONTROLLER=konflux-jbs-pnc-tenant/jvm-build-service/controller
          export JVM_BUILD_SERVICE_IMAGE=quay.io/$JBS_QUAY_ORG/$JBS_QUAY_IMAGE_CONTROLLER:$JBS_QUAY_IMAGE_TAG
          export JVM_BUILD_SERVICE_CACHE_IMAGE=quay.io/$JBS_QUAY_ORG/konflux-jbs-pnc-tenant/jvm-build-service/cache:$JBS_QUAY_IMAGE_TAG
          export JVM_BUILD_SERVICE_REQPROCESSOR_IMAGE=quay.io/$JBS_QUAY_ORG/konflux-jbs-pnc-tenant/jvm-build-service/build-request-processor:$JBS_QUAY_IMAGE_TAG

          echo "Using worker namespace $JBS_WORKER_NAMESPACE DEV_IP $DEV_IP JVM_BUILD_SERVICE_IMAGE $JVM_BUILD_SERVICE_IMAGE"

          eval $(minikube -p minikube docker-env)

          export DBTESTSET=${{ matrix.dbtestsets }}
          echo "Using DBTESTSET $DBTESTSET"

          ./deploy/minikube-ci.sh
          make minikube-test
      - name: Archive Report
        uses: actions/upload-artifact@604373da6381bf24206979c74d06a550515601b9 # v4
        if: always()
        with:
          name: matrix-report-${{ matrix.dbtestsets }}
          path: /tmp/jvm-build-service-report
